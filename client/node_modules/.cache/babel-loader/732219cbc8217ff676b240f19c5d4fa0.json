{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from '../transactions/addSongTransaction.js';\nimport MoveSong_Transaction from '../transactions/moveSongTransaction.js';\nimport DeleteSong_Transaction from '../transactions/deleteSongTransaction.js';\nimport EditSong_Transaction from '../transactions/editSongTransaction.js';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG: \"MARK_SONG\",\n  CLOSE_MODAL: \"CLOSE_MODAL\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    listNameActive: false,\n    markedListId: null,\n    markedSongId: null,\n    modalOpen: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            modalOpen: store.modalOpen\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: null,\n            modalOpen: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            modalOpen: store.modalOpen\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            modalOpen: store.modalOpen\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: payload.id,\n            markedSongId: store.markedSongId,\n            modalOpen: false\n          });\n        }\n      // PREPARE TO Delete/Edit A songs\n\n      case GlobalStoreActionType.MARK_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: payload.id,\n            modalOpen: true\n          });\n        }\n      //CLOSE MODAL\n\n      case GlobalStoreActionType.CLOSE_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            modalOpen: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.list,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            modalOpen: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: true,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            modalOpen: store.modalOpen\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let response = await api.createPlaylist(store.idNamePairs.length);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.setCurrentList(store.idNamePairs[store.idNamePairs.length - 1]._id);\n        store.loadIdNamePairs();\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylist(playlist._id, playlist.name, playlist.songs);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    tps.clearAllTransactions();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {}\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(id + \"    \" + playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: {\n              list: playlist\n            }\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  }; // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    let transaction = new AddSong_Transaction(store, title, artist, youTubeId, index);\n    tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addMoveSongTransaction = (start, end) => {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addDeleteSongTransaction = index => {\n    let song = store.currentList.songs[index];\n    let transaction = new DeleteSong_Transaction(store, song.title, song.artist, song.youTubeId, index);\n    tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS AN UpdateSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addEditSongTransaction = (index, newTitle, newArtist, newYouTubeId) => {\n    // GET THE CURRENT TEXT\n    let song = store.currentList.songs[index];\n    let transaction = new EditSong_Transaction(store, newTitle, newArtist, newYouTubeId, song.title, song.artist, song.youTubeId, index);\n    tps.addTransaction(transaction);\n  };\n\n  store.undo = function () {\n    if (tps.hasTransactionToUndo) {\n      tps.undoTransaction();\n    }\n  };\n\n  store.redo = function () {\n    if (tps.hasTransactionToRedo) {\n      tps.doTransaction();\n    }\n  };\n\n  store.canUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  store.canRedo = function () {\n    return tps.hasTransactionToRedo();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n\n\n  store.deletePlaylist = function (id) {\n    async function asyncDeletePlaylist(id) {\n      let response = await api.deletePlaylist(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n      }\n    }\n\n    asyncDeletePlaylist(id);\n    store.hideDeleteListModal();\n    store.loadIdNamePairs();\n  };\n\n  store.showDeleteListModal = function (nameIdPair) {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: {\n        id: nameIdPair\n      }\n    });\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL,\n      payload: null\n    });\n  }; //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n  //ADDING\n\n\n  store.addSong = function (SongTitle, SongArtist, SongYouTubeId, index) {\n    async function asyncAddSong() {\n      let playlist = store.currentList;\n      let songs = playlist.songs;\n      let name = playlist.name;\n      songs.splice(index, 0, {\n        title: SongTitle,\n        artist: SongArtist,\n        youTubeId: SongYouTubeId\n      });\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            list: playlist\n          }\n        });\n      }\n    }\n\n    asyncAddSong();\n  }; //DELETING\n\n\n  store.showDeleteSongModal = function (index) {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: {\n        id: index\n      }\n    });\n  };\n\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL,\n      payload: null\n    });\n  };\n\n  store.deleteSong = function (index) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name;\n    songs.splice(index, 1);\n\n    async function asyncDeleteSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            list: playlist\n          }\n        });\n        store.hideDeleteSongModal();\n      }\n    }\n\n    asyncDeleteSong();\n  }; //EDITING\n\n\n  store.showEditSongModal = function (index) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n    let song = store.currentList.songs[index];\n    document.getElementById(\"edit-song-modal-title-textfield\").value = song.title;\n    document.getElementById(\"edit-song-modal-artist-textfield\").value = song.artist;\n    document.getElementById(\"edit-song-modal-youTubeId-textfield\").value = song.youTubeId;\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: {\n        id: index\n      }\n    });\n  };\n\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL,\n      payload: null\n    });\n  };\n\n  store.editSong = function (newTitle, newArtist, newYouTubeId, index) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name;\n    songs[index] = {\n      title: newTitle,\n      artist: newArtist,\n      youTubeId: newYouTubeId\n    };\n\n    async function asyncEditSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            list: playlist\n          }\n        });\n        store.hideEditSongModal();\n      }\n    }\n\n    asyncEditSong();\n  }; //MOVE\n\n\n  store.moveSong = function (start, end) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n    if (start < end) {\n      let temp = songs[start];\n\n      for (let i = start; i < end; i++) {\n        songs[i] = songs[i + 1];\n      }\n\n      songs[end] = temp;\n    } else if (start > end) {\n      let temp = songs[start];\n\n      for (let i = start; i > end; i--) {\n        songs[i] = songs[i - 1];\n      }\n\n      songs[end] = temp;\n    }\n\n    async function asyncMoveSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            list: playlist\n          }\n        });\n      }\n    }\n\n    asyncMoveSong();\n  }; //UNDO REDO USING KEYS\n\n\n  function KeyPress(event) {\n    if (!store.modalOpen && event.ctrlKey) {\n      if (event.KeyPress === 'z') {\n        store.undo();\n      }\n\n      if (event.KeyPress === 'y') {\n        store.redo();\n      }\n    }\n  }\n\n  document.onkeydown = event => KeyPress(event); // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"7gea0o4N6/2yMLAujypLtj1S/nA=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","MoveSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG","CLOSE_MODAL","tps","useGlobalStore","store","setStore","idNamePairs","currentList","listNameActive","markedListId","markedSongId","modalOpen","storeReducer","action","type","payload","playlist","id","list","createNewList","asyncCreateNewList","response","createPlaylist","length","data","success","setCurrentList","_id","loadIdNamePairs","changeListName","newName","asyncChangeListName","getPlaylistById","name","updateList","updatePlaylist","songs","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","clearAllTransactions","asyncLoadIdNamePairs","asyncSetCurrentList","console","log","history","push","getPlaylistSize","addCreateSongTransaction","index","title","artist","youTubeId","transaction","addTransaction","addMoveSongTransaction","start","end","addDeleteSongTransaction","song","addEditSongTransaction","newTitle","newArtist","newYouTubeId","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","canUndo","canRedo","setIsListNameEditActive","deletePlaylist","asyncDeletePlaylist","hideDeleteListModal","showDeleteListModal","nameIdPair","modal","document","getElementById","classList","add","remove","addSong","SongTitle","SongArtist","SongYouTubeId","asyncAddSong","splice","showDeleteSongModal","hideDeleteSongModal","deleteSong","asyncDeleteSong","showEditSongModal","value","hideEditSongModal","editSong","asyncEditSong","moveSong","temp","i","asyncMoveSong","KeyPress","event","ctrlKey","onkeydown"],"sources":["/Users/mikeybudney/Desktop/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport AddSong_Transaction from '../transactions/addSongTransaction.js'\nimport MoveSong_Transaction from '../transactions/moveSongTransaction.js';\nimport DeleteSong_Transaction from '../transactions/deleteSongTransaction.js';\nimport EditSong_Transaction from '../transactions/editSongTransaction.js';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    MARK_SONG: \"MARK_SONG\",\n    CLOSE_MODAL: \"CLOSE_MODAL\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        listNameActive: false,\n        markedListId: null,\n        markedSongId: null,\n        modalOpen: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    modalOpen: store.modalOpen\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: null,\n                    modalOpen: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    modalOpen: store.modalOpen\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    modalOpen: store.modalOpen\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: payload.id,\n                    markedSongId: store.markedSongId,\n                    modalOpen: false\n                });\n            }\n            // PREPARE TO Delete/Edit A songs\n            case GlobalStoreActionType.MARK_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: payload.id,\n                    modalOpen: true\n                });\n            }\n\n            //CLOSE MODAL\n            case GlobalStoreActionType.CLOSE_MODAL: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    modalOpen: false\n                });\n            }\n\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.list,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    modalOpen: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: true,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    modalOpen: store.modalOpen\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n    store.createNewList = function(){\n        async function asyncCreateNewList(){\n            let response = await api.createPlaylist(store.idNamePairs.length);\n            if(response.data.success){\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                store.setCurrentList(store.idNamePairs[store.idNamePairs.length-1]._id);\n                store.loadIdNamePairs();\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylist(playlist._id, playlist.name, playlist.songs);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        tps.clearAllTransactions();\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                console.log(id + \"    \" + playlist)\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: {list: playlist}\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n\n     // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n     store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n        let transaction = new AddSong_Transaction(store, title, artist, youTubeId, index);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n    store.addMoveSongTransaction = (start, end) => {\n        let transaction = new MoveSong_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n    store.addDeleteSongTransaction = (index) => {\n        let song = store.currentList.songs[index];\n        let transaction = new DeleteSong_Transaction(store, song.title, song.artist, song.youTubeId, index);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS AN UpdateSong_Transaction TO THE TRANSACTION STACK\n    store.addEditSongTransaction = (index, newTitle, newArtist, newYouTubeId) => {\n        // GET THE CURRENT TEXT\n        let song = store.currentList.songs[index];\n        let transaction = new EditSong_Transaction(store, newTitle, newArtist, newYouTubeId, song.title, song.artist, song.youTubeId, index);\n        tps.addTransaction(transaction);\n    }\n\n    store.undo = function () {\n        if(tps.hasTransactionToUndo){\n            tps.undoTransaction();\n        }\n    }\n    store.redo = function () {\n        if(tps.hasTransactionToRedo){\n            tps.doTransaction();\n        }\n    }\n\n    store.canUndo = function (){\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function (){\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    } \n\n\n    //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n    store.deletePlaylist = function (id) {\n        async function asyncDeletePlaylist(id){\n            let response = await api.deletePlaylist(id);\n            if(response.data.success){\n                store.loadIdNamePairs();\n            }\n        }\n        asyncDeletePlaylist(id);\n        store.hideDeleteListModal();\n        store.loadIdNamePairs();\n    }\n\n    store.showDeleteListModal = function (nameIdPair) {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload:{id: nameIdPair}\n        });\n    }\n\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_MODAL,\n            payload: null\n        });\n    }\n\n    //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n\n\n    //ADDING\n    store.addSong = function (SongTitle, SongArtist, SongYouTubeId, index) {\n        async function asyncAddSong() {\n            let playlist = store.currentList;\n            let songs = playlist.songs;\n            let name = playlist.name;\n            songs.splice(index, 0, {title: SongTitle, artist: SongArtist, youTubeId: SongYouTubeId});\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {list: playlist}\n                })\n            }\n        }\n        asyncAddSong();\n    }\n\n    //DELETING\n    store.showDeleteSongModal = function (index){\n        let modal = document.getElementById(\"remove-song-modal\");\n        modal.classList.add(\"is-visible\");\n\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: {id: index}\n        });\n    }\n\n    store.hideDeleteSongModal = function () {\n        let modal = document.getElementById(\"remove-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_MODAL,\n            payload: null\n        });\n    }\n\n    store.deleteSong = function (index) {\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        songs.splice(index,1);\n        async function asyncDeleteSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {list: playlist}\n                })\n            store.hideDeleteSongModal();\n            }\n        }\n        asyncDeleteSong();\n    }\n\n    \n    //EDITING\n    store.showEditSongModal = function(index){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n        let song = store.currentList.songs[index];\n        document.getElementById(\"edit-song-modal-title-textfield\").value = song.title;\n        document.getElementById(\"edit-song-modal-artist-textfield\").value = song.artist;\n        document.getElementById(\"edit-song-modal-youTubeId-textfield\").value = song.youTubeId;\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: {id: index}\n        });\n    }\n\n    store.hideEditSongModal = function () {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_MODAL,\n            payload: null\n        });\n    }\n\n    store.editSong = function (newTitle, newArtist, newYouTubeId, index) {\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        songs[index] = {title: newTitle, artist: newArtist, youTubeId: newYouTubeId};\n        async function asyncEditSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {list: playlist}\n                })\n            store.hideEditSongModal();\n            }\n        }\n        asyncEditSong();\n    }\n\n    //MOVE\n    store.moveSong = function(start, end){\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = songs[start];\n            for (let i = start; i < end; i++) {\n                songs[i] = songs[i + 1];\n            }\n            songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = songs[start];\n            for (let i = start; i > end; i--) {\n                songs[i] = songs[i - 1];\n            }\n            songs[end] = temp;\n        }\n        async function asyncMoveSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {list: playlist}\n                })\n            }\n        }\n        asyncMoveSong();\n    }\n\n    //UNDO REDO USING KEYS\n\n    function KeyPress(event) {\n        if (!store.modalOpen && event.ctrlKey){\n            if(event.KeyPress === 'z'){\n                store.undo();\n            } \n            if(event.KeyPress === 'y'){\n                store.redo();\n            }\n        }\n  }\n  \n  document.onkeydown = (event) => KeyPress(event);\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}