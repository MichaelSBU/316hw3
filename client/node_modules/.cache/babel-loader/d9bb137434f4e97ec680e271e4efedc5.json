{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from '../transactions/addSongTransaction.js';\nimport MoveSong_Transaction from '../transactions/moveSongTransaction.js';\nimport DeleteSong_Transaction from '../transactions/deleteSongTransaction.js';\nimport EditSong_Transaction from '../transactions/editSongTransaction.js';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG: \"MARK_SONG\",\n  CLOSE_MODAL: \"CLOSE_MODAL\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    listNameActive: false,\n    markedListId: null,\n    markedSongId: null,\n    canUndo: false,\n    canRedo: false,\n    modalOpen: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            canUndo: store.canUndo,\n            canRedo: store.canRedo,\n            modalOpen: store.modalOpen\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            canUndo: false,\n            canRedo: false,\n            modalOpen: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            canUndo: store.canUndo,\n            canRedo: store.canRedo,\n            modalOpen: store.modalOpen\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            canUndo: store.canUndo,\n            canRedo: store.canRedo,\n            modalOpen: store.modalOpen\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: payload.id,\n            markedSongId: store.markedSongId,\n            canUndo: payload.undo,\n            canRedo: payload.redo,\n            modalOpen: payload.modalOpen\n          });\n        }\n      // PREPARE TO Delete/Edit A songs\n\n      case GlobalStoreActionType.MARK_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: payload.id,\n            canUndo: payload.undo,\n            canRedo: payload.redo,\n            modalOpen: payload.modalOpen\n          });\n        }\n      //CLOSE MODAL\n\n      case GlobalStoreActionType.CLOSE_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            canUndo: store.canUndo,\n            canRedo: store.canRedo,\n            modalOpen: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            canUndo: store.canUndo,\n            canRedo: store.canRedo,\n            modalOpen: store.modalOpen\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: true,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId,\n            canUndo: store.canUndo,\n            canRedo: store.canRedo,\n            modalOpen: store.modalOpen\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let response = await api.createPlaylist(store.idNamePairs.length);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.loadIdNamePairs();\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylist(playlist._id, playlist.name, playlist.songs);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    tps.clearAllTransactions();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {}\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  }; // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    let transaction = new AddSong_Transaction(store, title, artist, youTubeId, index);\n    tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addMoveSongTransaction = (start, end) => {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addDeleteSongTransaction = index => {\n    let song = store.currentList.songs[index];\n    let transaction = new DeleteSong_Transaction(store, song.title, song.artist, song.youTubeId, index);\n    tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS AN UpdateSong_Transaction TO THE TRANSACTION STACK\n\n\n  store.addEditSongTransaction = (index, newTitle, newArtist, newYouTubeId) => {\n    // GET THE CURRENT TEXT\n    let song = store.currentList.songs[index];\n    let transaction = new EditSong_Transaction(store, newTitle, newArtist, newYouTubeId, song.title, song.artist, song.youTubeId, index);\n    tps.addTransaction(transaction);\n  };\n\n  store.undo = function () {\n    if (tps.hasTransactionToUndo) {\n      tps.undoTransaction();\n    }\n\n    storeReducer({\n      type: GlobalStoreActionType.CAN_UNDO_REDO_IS_MODAL_OPEN,\n      payload: {\n        undo: tps.hasTransactionToUndo,\n        redo: tps.hasTransactionToRedo,\n        modalOpen: store.modalOpen\n      }\n    });\n  };\n\n  store.redo = function () {\n    if (tps.hasTransactionToRedo) {\n      tps.doTransaction();\n    }\n\n    storeReducer({\n      type: GlobalStoreActionType.CAN_UNDO_REDO_IS_MODAL_OPEN,\n      payload: {\n        undo: tps.hasTransactionToUndo,\n        redo: tps.hasTransactionToRedo,\n        modalOpen: store.modalOpen\n      }\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n\n\n  store.deletePlaylist = function (id) {\n    async function asyncDeletePlaylist(id) {\n      let response = await api.deletePlaylist(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n      }\n    }\n\n    asyncDeletePlaylist(id);\n    store.hideDeleteListModal();\n    store.loadIdNamePairs();\n  };\n\n  store.showDeleteListModal = function (nameIdPair) {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: {\n        id: nameIdPair,\n        undo: tps.hasTransactionToUndo(),\n        redo: tps.hasTransactionToRedo(),\n        modalOpen: !store.modalOpen\n      }\n    });\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL\n    });\n  }; //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n  //ADDING\n\n\n  store.addSong = function (SongTitle, SongArtist, SongYouTubeId, index) {\n    async function asyncAddSong() {\n      let playlist = store.currentList;\n      let songs = playlist.songs;\n      let name = playlist.name;\n      songs.splice(index, 0, {\n        title: SongTitle,\n        artist: SongArtist,\n        youTubeId: SongYouTubeId\n      });\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n      }\n    }\n\n    asyncAddSong();\n  }; //DELETING\n\n\n  store.showDeleteSongModal = function (index) {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: {\n        id: index,\n        undo: tps.hasTransactionToUndo(),\n        redo: tps.hasTransactionToRedo(),\n        modalOpen: !store.modalOpen\n      }\n    });\n  };\n\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL\n    });\n  };\n\n  store.deleteSong = function (index) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name;\n    songs.splice(index, 1);\n\n    async function asyncDeleteSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n        store.hideDeleteSongModal();\n      }\n    }\n\n    asyncDeleteSong();\n  }; //EDITING\n\n\n  store.showEditSongModal = function (index) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n    let song = store.currentList.songs[index];\n    document.getElementById(\"edit-song-modal-title-textfield\").value = song.title;\n    document.getElementById(\"edit-song-modal-artist-textfield\").value = song.artist;\n    document.getElementById(\"edit-song-modal-youTubeId-textfield\").value = song.youTubeId;\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: {\n        id: index,\n        undo: tps.hasTransactionToUndo(),\n        redo: tps.hasTransactionToRedo(),\n        modalOpen: !store.modalOpen\n      }\n    });\n  };\n\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL\n    });\n  };\n\n  store.editSong = function (newTitle, newArtist, newYouTubeId, index) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name;\n    songs[index] = {\n      title: newTitle,\n      artist: newArtist,\n      youTubeId: newYouTubeId\n    };\n\n    async function asyncEditSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n        store.hideEditSongModal();\n      }\n    }\n\n    asyncEditSong();\n  }; //MOVE\n\n\n  store.moveSong = function (start, end) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n    if (start < end) {\n      let temp = songs[start];\n\n      for (let i = start; i < end; i++) {\n        songs[i] = songs[i + 1];\n      }\n\n      songs[end] = temp;\n    } else if (start > end) {\n      let temp = songs[start];\n\n      for (let i = start; i > end; i--) {\n        songs[i] = songs[i - 1];\n      }\n\n      songs[end] = temp;\n    }\n\n    async function asyncMoveSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n      }\n    }\n\n    asyncMoveSong();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"GXiRbKsyVqzIoGypq5niIxX3SRY=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","MoveSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG","CLOSE_MODAL","tps","useGlobalStore","store","setStore","idNamePairs","currentList","listNameActive","markedListId","markedSongId","canUndo","canRedo","modalOpen","storeReducer","action","type","payload","playlist","id","undo","redo","createNewList","asyncCreateNewList","response","createPlaylist","length","data","success","loadIdNamePairs","changeListName","newName","asyncChangeListName","getPlaylistById","name","updateList","updatePlaylist","_id","songs","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","clearAllTransactions","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","addCreateSongTransaction","index","title","artist","youTubeId","transaction","addTransaction","addMoveSongTransaction","start","end","addDeleteSongTransaction","song","addEditSongTransaction","newTitle","newArtist","newYouTubeId","hasTransactionToUndo","undoTransaction","CAN_UNDO_REDO_IS_MODAL_OPEN","hasTransactionToRedo","doTransaction","setIsListNameEditActive","deletePlaylist","asyncDeletePlaylist","hideDeleteListModal","showDeleteListModal","nameIdPair","modal","document","getElementById","classList","add","remove","addSong","SongTitle","SongArtist","SongYouTubeId","asyncAddSong","splice","showDeleteSongModal","hideDeleteSongModal","deleteSong","asyncDeleteSong","showEditSongModal","value","hideEditSongModal","editSong","asyncEditSong","moveSong","temp","i","asyncMoveSong"],"sources":["/Users/mikeybudney/Desktop/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport AddSong_Transaction from '../transactions/addSongTransaction.js'\nimport MoveSong_Transaction from '../transactions/moveSongTransaction.js';\nimport DeleteSong_Transaction from '../transactions/deleteSongTransaction.js';\nimport EditSong_Transaction from '../transactions/editSongTransaction.js';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    MARK_SONG: \"MARK_SONG\",\n    CLOSE_MODAL: \"CLOSE_MODAL\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        listNameActive: false,\n        markedListId: null,\n        markedSongId: null,\n        canUndo: false,\n        canRedo: false,\n        modalOpen: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    canUndo: store.canUndo,\n                    canRedo: store.canRedo,\n                    modalOpen: store.modalOpen\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    canUndo: false,\n                    canRedo: false,\n                    modalOpen: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    canUndo: store.canUndo,\n                    canRedo: store.canRedo,\n                    modalOpen: store.modalOpen\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    canUndo: store.canUndo,\n                    canRedo: store.canRedo,\n                    modalOpen: store.modalOpen\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: payload.id,\n                    markedSongId: store.markedSongId,\n                    canUndo: payload.undo,\n                    canRedo: payload.redo,\n                    modalOpen: payload.modalOpen\n                });\n            }\n            // PREPARE TO Delete/Edit A songs\n            case GlobalStoreActionType.MARK_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: payload.id,\n                    canUndo: payload.undo,\n                    canRedo: payload.redo,\n                    modalOpen: payload.modalOpen\n                });\n            }\n\n            //CLOSE MODAL\n            case GlobalStoreActionType.CLOSE_MODAL: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    canUndo: store.canUndo,\n                    canRedo: store.canRedo,\n                    modalOpen: false\n                });\n            }\n\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    canUndo: store.canUndo,\n                    canRedo: store.canRedo,\n                    modalOpen: store.modalOpen\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: true,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId,\n                    canUndo: store.canUndo,\n                    canRedo: store.canRedo,\n                    modalOpen: store.modalOpen\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n    store.createNewList = function(){\n        async function asyncCreateNewList(){\n            let response = await api.createPlaylist(store.idNamePairs.length);\n            if(response.data.success){\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                store.loadIdNamePairs();\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylist(playlist._id, playlist.name, playlist.songs);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        tps.clearAllTransactions();\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n\n     // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n     store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n        let transaction = new AddSong_Transaction(store, title, artist, youTubeId, index);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n    store.addMoveSongTransaction = (start, end) => {\n        let transaction = new MoveSong_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n    store.addDeleteSongTransaction = (index) => {\n        let song = store.currentList.songs[index];\n        let transaction = new DeleteSong_Transaction(store, song.title, song.artist, song.youTubeId, index);\n        tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS AN UpdateSong_Transaction TO THE TRANSACTION STACK\n    store.addEditSongTransaction = (index, newTitle, newArtist, newYouTubeId) => {\n        // GET THE CURRENT TEXT\n        let song = store.currentList.songs[index];\n        let transaction = new EditSong_Transaction(store, newTitle, newArtist, newYouTubeId, song.title, song.artist, song.youTubeId, index);\n        tps.addTransaction(transaction);\n    }\n\n    store.undo = function () {\n        if(tps.hasTransactionToUndo){\n            tps.undoTransaction();\n        }\n        storeReducer({\n            type: GlobalStoreActionType.CAN_UNDO_REDO_IS_MODAL_OPEN,\n            payload: {undo: tps.hasTransactionToUndo, redo: tps.hasTransactionToRedo, modalOpen: store.modalOpen}\n        });\n    }\n    store.redo = function () {\n        if(tps.hasTransactionToRedo){\n            tps.doTransaction();\n        }\n        storeReducer({\n            type: GlobalStoreActionType.CAN_UNDO_REDO_IS_MODAL_OPEN,\n            payload: {undo: tps.hasTransactionToUndo, redo: tps.hasTransactionToRedo, modalOpen: store.modalOpen}\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    } \n\n\n    //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n    store.deletePlaylist = function (id) {\n        async function asyncDeletePlaylist(id){\n            let response = await api.deletePlaylist(id);\n            if(response.data.success){\n                store.loadIdNamePairs();\n            }\n        }\n        asyncDeletePlaylist(id);\n        store.hideDeleteListModal();\n        store.loadIdNamePairs();\n    }\n\n    store.showDeleteListModal = function (nameIdPair) {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload:{id: nameIdPair, undo: tps.hasTransactionToUndo(), redo: tps.hasTransactionToRedo(), modalOpen: !store.modalOpen}\n        });\n    }\n\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_MODAL,\n        });\n    }\n\n    //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n\n\n    //ADDING\n    store.addSong = function (SongTitle, SongArtist, SongYouTubeId, index) {\n        async function asyncAddSong() {\n            let playlist = store.currentList;\n            let songs = playlist.songs;\n            let name = playlist.name;\n            songs.splice(index, 0, {title: SongTitle, artist: SongArtist, youTubeId: SongYouTubeId});\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            }\n        }\n        asyncAddSong();\n    }\n\n    //DELETING\n    store.showDeleteSongModal = function (index){\n        let modal = document.getElementById(\"remove-song-modal\");\n        modal.classList.add(\"is-visible\");\n\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: {id: index, undo: tps.hasTransactionToUndo(), redo: tps.hasTransactionToRedo(), modalOpen: !store.modalOpen}\n        });\n    }\n\n    store.hideDeleteSongModal = function () {\n        let modal = document.getElementById(\"remove-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_MODAL,\n        });\n    }\n\n    store.deleteSong = function (index) {\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        songs.splice(index,1);\n        async function asyncDeleteSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            store.hideDeleteSongModal();\n            }\n        }\n        asyncDeleteSong();\n    }\n\n    \n    //EDITING\n    store.showEditSongModal = function(index){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n        let song = store.currentList.songs[index];\n        document.getElementById(\"edit-song-modal-title-textfield\").value = song.title;\n        document.getElementById(\"edit-song-modal-artist-textfield\").value = song.artist;\n        document.getElementById(\"edit-song-modal-youTubeId-textfield\").value = song.youTubeId;\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: {id: index, undo: tps.hasTransactionToUndo(), redo: tps.hasTransactionToRedo(), modalOpen: !store.modalOpen}\n        });\n    }\n\n    store.hideEditSongModal = function () {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_MODAL,\n        });\n    }\n\n    store.editSong = function (newTitle, newArtist, newYouTubeId, index) {\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        songs[index] = {title: newTitle, artist: newArtist, youTubeId: newYouTubeId};\n        async function asyncEditSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            store.hideEditSongModal();\n            }\n        }\n        asyncEditSong();\n    }\n\n    //MOVE\n    store.moveSong = function(start, end){\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = songs[start];\n            for (let i = start; i < end; i++) {\n                songs[i] = songs[i + 1];\n            }\n            songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = songs[start];\n            for (let i = start; i > end; i--) {\n                songs[i] = songs[i - 1];\n            }\n            songs[end] = temp;\n        }\n        async function asyncMoveSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            }\n        }\n        asyncMoveSong();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}