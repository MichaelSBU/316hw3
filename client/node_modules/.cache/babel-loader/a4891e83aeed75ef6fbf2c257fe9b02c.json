{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    listNameActive: false,\n    markedListId: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            listNameActive: false,\n            markedListId: store.markedListId\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: false,\n            markedListId: store.markedListId\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: false,\n            markedListId: store.markedListId\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: true,\n            markedListId: store.markedListId\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let response = await api.createPlaylist(store.idNamePairs.length);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(playlist);\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.loadIdNamePairs();\n      }\n    }\n\n    console.log(\"creating new playlist\");\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n\n\n  store.deletePlaylist = function (id) {\n    async function asyncDeletePlaylist(id) {\n      console.log(id);\n      let response = await api.deletePlaylist(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n      }\n    }\n\n    console.log(\"deleting playlist\");\n    asyncDeletePlaylist(id);\n    store.hideDeleteListModal();\n    store.loadIdNamePairs();\n    console.log(\"playlist deleted\");\n  };\n\n  store.showDeleteListModal = function (_id) {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: _id\n    });\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  }; //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n\n\n  store.addSong = function () {\n    let id = store.currentList._id;\n\n    async function asyncRetrieveList() {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        songs.push({\n          title: \"Untitled\",\n          artist: \"Unknown\",\n          youTubeId: \"dQw4w9WgXcQ\"\n        });\n\n        async function asyncAddSong() {\n          let response = await api.updatePlaylist(id, name, songs);\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.SET_CURRENT_LIST,\n              payload: playlist\n            });\n          }\n        }\n\n        console.log(\"adding song to playlist\");\n        asyncAddSong();\n        console.log(\"added song to playlist\");\n      }\n    }\n\n    asyncRetrieveList();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"rfoVdf0BVh4Ce4ZshOxpmuxtODE=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","listNameActive","markedListId","storeReducer","action","type","payload","playlist","createNewList","asyncCreateNewList","response","createPlaylist","length","data","success","console","log","loadIdNamePairs","changeListName","id","newName","asyncChangeListName","getPlaylistById","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","undo","undoTransaction","redo","doTransaction","setlistNameActive","deletePlaylist","asyncDeletePlaylist","hideDeleteListModal","showDeleteListModal","modal","document","getElementById","classList","add","remove","addSong","asyncRetrieveList","title","artist","youTubeId","asyncAddSong","updatePlaylist"],"sources":["/Users/mikeybudney/Desktop/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        listNameActive: false,\n        markedListId: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    listNameActive: false,\n                    markedListId: store.markedListId\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: false,\n                    markedListId: store.markedListId\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: payload\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: false,\n                    markedListId: store.markedListId\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: true,\n                    markedListId: store.markedListId\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n    store.createNewList = function(){\n        async function asyncCreateNewList(){\n            let response = await api.createPlaylist(store.idNamePairs.length);\n            if(response.data.success){\n                let playlist = response.data.playlist;\n                console.log(playlist);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                store.loadIdNamePairs();\n            }\n        }\n        console.log(\"creating new playlist\");\n        asyncCreateNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n\n    //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n    store.deletePlaylist = function (id) {\n        async function asyncDeletePlaylist(id){\n            console.log(id);\n            let response = await api.deletePlaylist(id);\n            if(response.data.success){\n                store.loadIdNamePairs();\n            }\n        }\n        console.log(\"deleting playlist\");\n        asyncDeletePlaylist(id);\n        store.hideDeleteListModal();\n        store.loadIdNamePairs();\n        console.log(\"playlist deleted\");\n    }\n\n    store.showDeleteListModal = function (_id) {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: _id\n        });\n    }\n\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n    store.addSong = function () {\n        let id = store.currentList._id;\n        async function asyncRetrieveList() {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let songs = playlist.songs;\n                let name = playlist.name;\n                songs.push({title: \"Untitled\", artist: \"Unknown\", youTubeId: \"dQw4w9WgXcQ\"})\n                    async function asyncAddSong(){\n                        let response = await api.updatePlaylist(id, name, songs);\n                            if(response.data.success){\n                                storeReducer({\n                                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                                    payload: playlist\n                                })\n                            }\n                    }\n                    console.log(\"adding song to playlist\");\n                    asyncAddSong();\n                    console.log(\"added song to playlist\");\n                }\n            }\n        asyncRetrieveList();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}