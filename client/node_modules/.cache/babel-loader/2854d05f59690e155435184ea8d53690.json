{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport CreateSong_Transaction from '../transactions/addSongTransaction.js';\nimport MoveSong_Transaction from '../transactions/moveSongTransaction.js';\nimport RemoveSong_Transaction from '../transactions/deleteSongTransaction.js';\nimport UpdateSong_Transaction from '../transactions/editSongTransaction.js';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG: \"MARK_SONG\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    listNameActive: false,\n    markedListId: null,\n    markedSongId: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            listNameActive: false,\n            markedListId: payload,\n            markedSongId: store.markedSongId\n          });\n        }\n      // PREPARE TO Delete/Edit A songs\n\n      case GlobalStoreActionType.MARK_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: false,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            listNameActive: true,\n            markedListId: store.markedListId,\n            markedSongId: store.markedSongId\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let response = await api.createPlaylist(store.idNamePairs.length);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(playlist);\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.loadIdNamePairs();\n      }\n    }\n\n    console.log(\"creating new playlist\");\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  }; // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n\n\n  addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    // ADD A SONG ITEM AND ITS NUMBER\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    };\n    let transaction = new CreateSong_Transaction(this, index, song);\n    this.tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n\n\n  addMoveSongTransaction = (start, end) => {\n    let transaction = new MoveSong_Transaction(this, start, end);\n    this.tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n\n\n  addRemoveSongTransaction = () => {\n    let index = this.state.currentSongIndex;\n    let song = this.state.currentList.songs[index];\n    let transaction = new RemoveSong_Transaction(this, index, song);\n    this.tps.addTransaction(transaction);\n  }; // THIS FUNCTION ADDS AN UpdateSong_Transaction TO THE TRANSACTION STACK\n\n\n  addUpdateSongTransaction = (index, newSongData) => {\n    // GET THE CURRENT TEXT\n    let song = this.state.currentList.songs[index];\n    let oldSongData = {\n      title: song.title,\n      artist: song.artist,\n      youTubeId: song.youTubeId\n    };\n    let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);\n    this.tps.addTransaction(transaction);\n  };\n\n  store.undo = function () {\n    if (tps.hasTransactionToUndo) {\n      tps.undoTransaction();\n    }\n  };\n\n  store.redo = function () {\n    if (tps.hasTransactionToRedo) {\n      tps.doTransaction();\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n\n\n  store.deletePlaylist = function (id) {\n    async function asyncDeletePlaylist(id) {\n      console.log(id);\n      let response = await api.deletePlaylist(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n      }\n    }\n\n    console.log(\"deleting playlist\");\n    asyncDeletePlaylist(id);\n    store.hideDeleteListModal();\n    store.loadIdNamePairs();\n    console.log(\"playlist deleted\");\n  };\n\n  store.showDeleteListModal = function (_id) {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: _id\n    });\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  }; //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n  //ADDING\n\n\n  store.addSong = function (index, song) {\n    async function asyncAddSong() {\n      let playlist = store.currentList;\n      let songs = playlist.songs;\n      let name = playlist.name;\n      songs[index] = song;\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n      }\n    }\n\n    console.log(\"adding song to playlist\");\n    asyncAddSong();\n    console.log(\"added song to playlist\");\n  }; //DELETING\n\n\n  store.showDeleteSongModal = function (index) {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: index\n    });\n  };\n\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.deleteSong = function (index) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name;\n    songs.splice(index, 1);\n\n    async function asyncDeleteSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n        store.hideDeleteSongModal();\n      }\n    }\n\n    console.log(\"deleting song \" + index + \" from playlist\");\n    asyncDeleteSong();\n    console.log(\"deleted song \" + index + \" from playlist\");\n  }; //EDITING\n\n\n  store.showEditSongModal = function (index) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: index\n    });\n  };\n\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.editSong = function (index, newTitle, newArtist, newYouTubeId) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name;\n    songs[index] = {\n      title: newTitle,\n      artist: newArtist,\n      youTubeId: newYouTubeId\n    };\n\n    async function asyncEditSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n        store.hideEditSongModal();\n      }\n    }\n\n    console.log(\"editing \" + index);\n    asyncEditSong();\n    console.log(\"edited song \" + index);\n  }; //MOVE\n\n\n  store.moveSong = function (start, end) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    let name = playlist.name; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n    if (start < end) {\n      let temp = songs[start];\n\n      for (let i = start; i < end; i++) {\n        songs[i] = songs[i + 1];\n      }\n\n      songs[end] = temp;\n    } else if (start > end) {\n      let temp = songs[start];\n\n      for (let i = start; i > end; i--) {\n        songs[i] = songs[i - 1];\n      }\n\n      songs[end] = temp;\n    }\n\n    async function asyncMoveSong() {\n      let response = await api.updatePlaylist(store.currentList._id, name, songs);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n      }\n    }\n\n    console.log(\"moving song at position\" + start + \" to position\" + end);\n    asyncMoveSong();\n    console.log(\"move completed!\");\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"feYN8tAgldN4qsj9T693sGZb+mI=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","CreateSong_Transaction","MoveSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","listNameActive","markedListId","markedSongId","storeReducer","action","type","payload","playlist","createNewList","asyncCreateNewList","response","createPlaylist","length","data","success","console","log","loadIdNamePairs","changeListName","id","newName","asyncChangeListName","getPlaylistById","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","addCreateSongTransaction","index","title","artist","youTubeId","song","transaction","addTransaction","addMoveSongTransaction","start","end","addRemoveSongTransaction","state","currentSongIndex","addUpdateSongTransaction","newSongData","oldSongData","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","setlistNameActive","deletePlaylist","asyncDeletePlaylist","hideDeleteListModal","showDeleteListModal","modal","document","getElementById","classList","add","remove","addSong","asyncAddSong","updatePlaylist","showDeleteSongModal","hideDeleteSongModal","deleteSong","splice","asyncDeleteSong","showEditSongModal","hideEditSongModal","editSong","newTitle","newArtist","newYouTubeId","asyncEditSong","moveSong","temp","i","asyncMoveSong"],"sources":["/Users/mikeybudney/Desktop/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport CreateSong_Transaction from '../transactions/addSongTransaction.js'\nimport MoveSong_Transaction from '../transactions/moveSongTransaction.js';\nimport RemoveSong_Transaction from '../transactions/deleteSongTransaction.js';\nimport UpdateSong_Transaction from '../transactions/editSongTransaction.js';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    MARK_SONG: \"MARK_SONG\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        listNameActive: false,\n        markedListId: null,\n        markedSongId: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    listNameActive: false,\n                    markedListId: payload,\n                    markedSongId: store.markedSongId\n                });\n            }\n            // PREPARE TO Delete/Edit A songs\n            case GlobalStoreActionType.MARK_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: payload\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: false,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    listNameActive: true,\n                    markedListId: store.markedListId,\n                    markedSongId: store.markedSongId\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n    store.createNewList = function(){\n        async function asyncCreateNewList(){\n            let response = await api.createPlaylist(store.idNamePairs.length);\n            if(response.data.success){\n                let playlist = response.data.playlist;\n                console.log(playlist);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                store.loadIdNamePairs();\n            }\n        }\n        console.log(\"creating new playlist\");\n        asyncCreateNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n\n     // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n     addCreateSongTransaction = (index, title, artist, youTubeId) => {\n        // ADD A SONG ITEM AND ITS NUMBER\n        let song = {\n            title: title,\n            artist: artist,\n            youTubeId: youTubeId\n        };\n        let transaction = new CreateSong_Transaction(this, index, song);\n        this.tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n    addMoveSongTransaction = (start, end) => {\n        let transaction = new MoveSong_Transaction(this, start, end);\n        this.tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n    addRemoveSongTransaction = () => {\n        let index = this.state.currentSongIndex;\n        let song = this.state.currentList.songs[index];\n        let transaction = new RemoveSong_Transaction(this, index, song);\n        this.tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION ADDS AN UpdateSong_Transaction TO THE TRANSACTION STACK\n    addUpdateSongTransaction = (index, newSongData) => {\n        // GET THE CURRENT TEXT\n        let song = this.state.currentList.songs[index];\n        let oldSongData = {\n            title: song.title,\n            artist: song.artist,\n            youTubeId: song.youTubeId\n        };\n        let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);\n        this.tps.addTransaction(transaction);\n    }\n\n    store.undo = function () {\n        if(tps.hasTransactionToUndo){\n            tps.undoTransaction();\n        }\n    }\n    store.redo = function () {\n        if(tps.hasTransactionToRedo){\n            tps.doTransaction();\n        }\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n\n    //FUNCTIONS INVOLVED IN DELETING PLAYLIST\n    store.deletePlaylist = function (id) {\n        async function asyncDeletePlaylist(id){\n            console.log(id);\n            let response = await api.deletePlaylist(id);\n            if(response.data.success){\n                store.loadIdNamePairs();\n            }\n        }\n        console.log(\"deleting playlist\");\n        asyncDeletePlaylist(id);\n        store.hideDeleteListModal();\n        store.loadIdNamePairs();\n        console.log(\"playlist deleted\");\n    }\n\n    store.showDeleteListModal = function (_id) {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: _id\n        });\n    }\n\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    //FUNCTIONS INVOLVED IN UPDATING PLAYLIST (adding, editing, removing, moving songs)\n\n\n    //ADDING\n    store.addSong = function (index, song) {\n        async function asyncAddSong() {\n            let playlist = store.currentList;\n            let songs = playlist.songs;\n            let name = playlist.name;\n            songs[index] = song;\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            }\n        }\n        console.log(\"adding song to playlist\");\n        asyncAddSong();\n        console.log(\"added song to playlist\");\n    }\n\n\n    //DELETING\n    store.showDeleteSongModal = function (index){\n        let modal = document.getElementById(\"remove-song-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: index\n        });\n    }\n\n    store.hideDeleteSongModal = function () {\n        let modal = document.getElementById(\"remove-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.deleteSong = function (index) {\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        songs.splice(index,1);\n        async function asyncDeleteSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            store.hideDeleteSongModal();\n            }\n        }\n        console.log(\"deleting song \" + index  + \" from playlist\");\n        asyncDeleteSong();\n        console.log(\"deleted song \" + index + \" from playlist\");\n    }\n\n    \n    //EDITING\n    store.showEditSongModal = function(index){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: index\n        });\n    }\n\n    store.hideEditSongModal = function () {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.editSong = function (index, newTitle, newArtist, newYouTubeId) {\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        songs[index] = {title: newTitle, artist: newArtist, youTubeId: newYouTubeId};\n        async function asyncEditSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            store.hideEditSongModal();\n            }\n        }\n        console.log(\"editing \" + index);\n        asyncEditSong();\n        console.log(\"edited song \" + index);\n    }\n\n    //MOVE\n    store.moveSong = function(start, end){\n        let playlist = store.currentList;\n        let songs = playlist.songs;\n        let name = playlist.name;\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = songs[start];\n            for (let i = start; i < end; i++) {\n                songs[i] = songs[i + 1];\n            }\n            songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = songs[start];\n            for (let i = start; i > end; i--) {\n                songs[i] = songs[i - 1];\n            }\n            songs[end] = temp;\n        }\n        async function asyncMoveSong() {\n            let response = await api.updatePlaylist(store.currentList._id, name, songs);\n            if(response.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            }\n        }\n        console.log(\"moving song at position\" + start + \" to position\" + end);\n        asyncMoveSong();\n        console.log(\"move completed!\");\n    }\n\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}